!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("rxjs/add/operator/debounce"),require("rxjs/add/operator/debounceTime"),require("rxjs/add/operator/distinctUntilChanged"),require("rxjs/add/operator/filter"),require("rxjs/add/operator/first"),require("rxjs/add/operator/ignoreElements"),require("rxjs/add/operator/last"),require("rxjs/add/operator/sample"),require("rxjs/add/operator/single"),require("rxjs/add/operator/skip"),require("rxjs/add/operator/skipUntil"),require("rxjs/add/operator/skipWhile"),require("rxjs/add/operator/take"),require("rxjs/add/operator/takeUntil"),require("rxjs/add/operator/takeWhile"),require("rxjs/add/operator/takeLast"),require("rxjs/add/operator/startWith"),require("rxjs/add/operator/throttle"),require("rxjs/add/operator/throttleTime"),require("rxjs/add/operator/map"),require("rxjs/add/operator/reduce"),require("rxjs/add/operator/scan"),require("rxjs/add/operator/concatMap"),require("rxjs/add/operator/switchMap"),require("rxjs/add/operator/combineAll"),require("rxjs/add/operator/withLatestFrom"),require("rxjs/add/operator/bufferCount"),require("rxjs/add/operator/switchMapTo"),require("rxjs/add/operator/every"),require("rxjs/add/operator/defaultIfEmpty"),require("rxjs/add/operator/do"),require("rxjs/observable/of"),require("rxjs/observable/empty"),require("rxjs/observable/from"),require("rxjs/observable/interval"),require("rxjs/observable/timer"),require("rxjs/observable/fromEvent"),require("rxjs/observable/fromPromise"),require("rxjs/observable/range"),require("rxjs/observable/fromEventPattern"),require("rxjs/observable/combineLatest"),require("rxjs/observable/concat"),require("rxjs/observable/forkJoin"),require("rxjs/observable/merge"),require("rxjs/observable/race"),require("rxjs/observable/zip"),require("rxjs/Scheduler"),require("rxjs/Subject"),require("rxjs/Observable")):"function"==typeof define&&define.amd?define(["exports","@angular/core","rxjs/add/operator/debounce","rxjs/add/operator/debounceTime","rxjs/add/operator/distinctUntilChanged","rxjs/add/operator/filter","rxjs/add/operator/first","rxjs/add/operator/ignoreElements","rxjs/add/operator/last","rxjs/add/operator/sample","rxjs/add/operator/single","rxjs/add/operator/skip","rxjs/add/operator/skipUntil","rxjs/add/operator/skipWhile","rxjs/add/operator/take","rxjs/add/operator/takeUntil","rxjs/add/operator/takeWhile","rxjs/add/operator/takeLast","rxjs/add/operator/startWith","rxjs/add/operator/throttle","rxjs/add/operator/throttleTime","rxjs/add/operator/map","rxjs/add/operator/reduce","rxjs/add/operator/scan","rxjs/add/operator/concatMap","rxjs/add/operator/switchMap","rxjs/add/operator/combineAll","rxjs/add/operator/withLatestFrom","rxjs/add/operator/bufferCount","rxjs/add/operator/switchMapTo","rxjs/add/operator/every","rxjs/add/operator/defaultIfEmpty","rxjs/add/operator/do","rxjs/observable/of","rxjs/observable/empty","rxjs/observable/from","rxjs/observable/interval","rxjs/observable/timer","rxjs/observable/fromEvent","rxjs/observable/fromPromise","rxjs/observable/range","rxjs/observable/fromEventPattern","rxjs/observable/combineLatest","rxjs/observable/concat","rxjs/observable/forkJoin","rxjs/observable/merge","rxjs/observable/race","rxjs/observable/zip","rxjs/Scheduler","rxjs/Subject","rxjs/Observable"],r):r(e["meepo-common"]={},e.ng.core,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx,e.Rx,e.Rx)}(this,function(e,r,t,o,a,s,i,n,p,b,d,u,l,x,f,c,v,j,m,y,O,h,R,q,g,k,w,E,_,C,P,T,I,M,L,S,F,V,U,W,D,A,N,z,J,B,K,$,G,H,Q){"use strict";var X=function(){return function(e,r,t){this.$implicit=e,this.ngForOf=r,this.key=t}}(),Y=function(){function e(e,r,t){this._viewContainer=e,this._template=r,this._differs=t,this._differ=null}return Object.defineProperty(e.prototype,"ngForTemplate",{set:function(e){e&&(this._template=e)},enumerable:!0,configurable:!0}),e.prototype.ngOnChanges=function(e){if("ngEachOf"in e){var r=e.ngEachOf.currentValue;!this._differ&&r&&(this._differ=this._differs.find(r).create())}},e.prototype.ngDoCheck=function(){if(this._differ){var e=this._differ.diff(this.ngEachOf);e&&this._applyChanges(e)}},e.prototype._applyChanges=function(e){var r=this,t=[];e.forEachItem(function(e){if(null==e.previousValue){var o=r._viewContainer.createEmbeddedView(r._template,new X(e.currentValue,r.ngEachOf,e.key),parseInt(e.key,16)),a=new Z(e,o,parseInt(e.key,16));t.push(a)}else if(null==e.currentValue)r._viewContainer.remove(parseInt(e.key,16));else{o=r._viewContainer.get(parseInt(e.key,16));r._viewContainer.move(o,parseInt(e.key,16));a=new Z(e.currentValue,o,parseInt(e.key,16));t.push(a)}})},e}();Y.decorators=[{type:r.Directive,args:[{selector:"[ngEach][ngEachOf]"}]}],Y.ctorParameters=function(){return[{type:r.ViewContainerRef},{type:r.TemplateRef},{type:r.KeyValueDiffers}]},Y.propDecorators={ngEachOf:[{type:r.Input}],ngForTemplate:[{type:r.Input}]};var Z=function(){return function(e,r,t){this.record=e,this.view=r,this.index=t}}(),ee=function(){return function(){}}();function re(e){return"string"==typeof e?"true"===(e=e.toLowerCase().trim())||"on"===e||""===e:!!e}function te(e){return"number"==typeof e}ee.decorators=[{type:r.NgModule,args:[{exports:[Y],declarations:[Y]}]}],ee.ctorParameters=function(){return[]};var oe=Array.isArray,ae=Number.isFinite;e.MeepoCommonModule=ee,e.isMeepoTrue=function(e){return re(e)},e.isTrueProperty=re,e.isCheckedProperty=function(e,r){return e===undefined||null===e||""===e?r===undefined||null===r||""===r:!0===e||"true"===e?!0===r||"true"===r:!1===e||"false"===e?!1===r||"false"===r:0===e||"0"===e?0===r||"0"===r:e==r},e.isBoolean=function(e){return"boolean"==typeof e},e.isString=function(e){return"string"==typeof e},e.isNumber=te,e.isFunction=function(e){return"function"==typeof e},e.isDefined=function(e){return void 0!==e},e.isUndefined=function(e){return void 0===e},e.isPresent=function(e){return e!==undefined&&null!==e},e.isBlank=function(e){return e===undefined||null===e},e.isObject=function(e){return"object"==typeof e},e.isArray=oe,e.isFinite=ae,e.isNaN=function(e){return te(e)&&e!==+e},e.isWindow=function(e){return null!==e&&e===e.window},e.isDocument=function(e){return 9===e.nodeType},e.ɵb=Y,e.ɵa=X,e.of=M.of,e.empty=L.empty,e.from=S.from,e.interval=F.interval,e.timer=V.timer,e.fromEvent=U.fromEvent,e.fromPromise=W.fromPromise,e.range=D.range,e.fromEventPattern=A.fromEventPattern,e.combineLatest=N.combineLatest,e.concat=z.concat,e.forkJoin=J.forkJoin,e.merge=B.merge,e.race=K.race,e.zip=$.zip,e.Scheduler=G.Scheduler,e.Subject=H.Subject,e.Observable=Q.Observable,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=meepo-common.umd.min.js.map
