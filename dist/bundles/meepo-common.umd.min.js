!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("rxjs/add/operator/debounce"),require("rxjs/add/operator/debounceTime"),require("rxjs/add/operator/distinctUntilChanged"),require("rxjs/add/operator/filter"),require("rxjs/add/operator/first"),require("rxjs/add/operator/ignoreElements"),require("rxjs/add/operator/last"),require("rxjs/add/operator/sample"),require("rxjs/add/operator/single"),require("rxjs/add/operator/skip"),require("rxjs/add/operator/skipUntil"),require("rxjs/add/operator/skipWhile"),require("rxjs/add/operator/take"),require("rxjs/add/operator/takeUntil"),require("rxjs/add/operator/takeWhile"),require("rxjs/add/operator/takeLast"),require("rxjs/add/operator/startWith"),require("rxjs/add/operator/throttle"),require("rxjs/add/operator/throttleTime"),require("rxjs/add/operator/map"),require("rxjs/add/operator/reduce"),require("rxjs/add/operator/scan"),require("rxjs/add/operator/concatMap"),require("rxjs/add/operator/switchMap"),require("rxjs/add/operator/combineAll"),require("rxjs/add/operator/withLatestFrom"),require("rxjs/add/operator/bufferCount"),require("rxjs/add/operator/switchMapTo"),require("rxjs/add/operator/every"),require("rxjs/add/operator/defaultIfEmpty"),require("rxjs/add/operator/do"),require("rxjs/observable/of"),require("rxjs/observable/empty"),require("rxjs/observable/from"),require("rxjs/observable/interval"),require("rxjs/observable/timer"),require("rxjs/observable/fromEvent"),require("rxjs/observable/fromPromise"),require("rxjs/observable/range"),require("rxjs/observable/fromEventPattern"),require("rxjs/observable/combineLatest"),require("rxjs/observable/concat"),require("rxjs/observable/forkJoin"),require("rxjs/observable/merge"),require("rxjs/observable/race"),require("rxjs/observable/zip"),require("rxjs/Scheduler"),require("rxjs/Subject"),require("rxjs/Observable")):"function"==typeof define&&define.amd?define(["exports","@angular/core","rxjs/add/operator/debounce","rxjs/add/operator/debounceTime","rxjs/add/operator/distinctUntilChanged","rxjs/add/operator/filter","rxjs/add/operator/first","rxjs/add/operator/ignoreElements","rxjs/add/operator/last","rxjs/add/operator/sample","rxjs/add/operator/single","rxjs/add/operator/skip","rxjs/add/operator/skipUntil","rxjs/add/operator/skipWhile","rxjs/add/operator/take","rxjs/add/operator/takeUntil","rxjs/add/operator/takeWhile","rxjs/add/operator/takeLast","rxjs/add/operator/startWith","rxjs/add/operator/throttle","rxjs/add/operator/throttleTime","rxjs/add/operator/map","rxjs/add/operator/reduce","rxjs/add/operator/scan","rxjs/add/operator/concatMap","rxjs/add/operator/switchMap","rxjs/add/operator/combineAll","rxjs/add/operator/withLatestFrom","rxjs/add/operator/bufferCount","rxjs/add/operator/switchMapTo","rxjs/add/operator/every","rxjs/add/operator/defaultIfEmpty","rxjs/add/operator/do","rxjs/observable/of","rxjs/observable/empty","rxjs/observable/from","rxjs/observable/interval","rxjs/observable/timer","rxjs/observable/fromEvent","rxjs/observable/fromPromise","rxjs/observable/range","rxjs/observable/fromEventPattern","rxjs/observable/combineLatest","rxjs/observable/concat","rxjs/observable/forkJoin","rxjs/observable/merge","rxjs/observable/race","rxjs/observable/zip","rxjs/Scheduler","rxjs/Subject","rxjs/Observable"],r):r(e["meepo-common"]={},e.ng.core,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable.prototype,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx.Observable,e.Rx,e.Rx,e.Rx)}(this,function(e,r,o,t,a,s,p,i,b,d,n,l,x,u,v,j,f,c,m,y,O,h,R,q,g,k,E,_,w,C,P,I,M,T,L,S,V,U,W,F,z,D,J,A,K,N,$,B,G,H,Q){"use strict";var X=function(){return function(e,r,o){this.$implicit=e,this.ngForOf=r,this.key=o}}(),Y=function(){function e(e,r,o){this._viewContainer=e,this._template=r,this._differs=o,this._differ=null}return Object.defineProperty(e.prototype,"ngForTemplate",{set:function(e){e&&(this._template=e)},enumerable:!0,configurable:!0}),e.prototype.ngOnChanges=function(e){if("ngEachOf"in e){var r=e.ngEachOf.currentValue;!this._differ&&r&&(this._differ=this._differs.find(r).create())}},e.prototype.ngDoCheck=function(){if(this._differ){var e=this._differ.diff(this.ngEachOf);e&&this._applyChanges(e)}},e.prototype._applyChanges=function(e){var r=this,o=[];e.forEachItem(function(e){if(null==e.previousValue){var t=r._viewContainer.createEmbeddedView(r._template,new X(e.currentValue,r.ngEachOf,e.key),parseInt(e.key,16)),a=new Z(e,t,parseInt(e.key,16));o.push(a)}else if(null==e.currentValue)r._viewContainer.remove(parseInt(e.key,16));else{t=r._viewContainer.get(parseInt(e.key,16));r._viewContainer.move(t,parseInt(e.key,16));a=new Z(e.currentValue,t,parseInt(e.key,16));o.push(a)}})},e}();Y.decorators=[{type:r.Directive,args:[{selector:"[ngEach][ngEachOf]"}]}],Y.ctorParameters=function(){return[{type:r.ViewContainerRef},{type:r.TemplateRef},{type:r.KeyValueDiffers}]},Y.propDecorators={ngEachOf:[{type:r.Input}],ngForTemplate:[{type:r.Input}]};var Z=function(){return function(e,r,o){this.record=e,this.view=r,this.index=o}}(),ee=function(){return function(){}}();ee.decorators=[{type:r.NgModule,args:[{exports:[Y],declarations:[Y]}]}],ee.ctorParameters=function(){return[]},e.MeepoCommonModule=ee,e.ɵb=Y,e.ɵa=X,e.of=T.of,e.empty=L.empty,e.from=S.from,e.interval=V.interval,e.timer=U.timer,e.fromEvent=W.fromEvent,e.fromPromise=F.fromPromise,e.range=z.range,e.fromEventPattern=D.fromEventPattern,e.combineLatest=J.combineLatest,e.concat=A.concat,e.forkJoin=K.forkJoin,e.merge=N.merge,e.race=$.race,e.zip=B.zip,e.Scheduler=G.Scheduler,e.Subject=H.Subject,e.Observable=Q.Observable,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=meepo-common.umd.min.js.map
