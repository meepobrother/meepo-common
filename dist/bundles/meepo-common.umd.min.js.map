{
  "version": 3,
  "file": "meepo-common.umd.min.js",
  "sources": [
    "ng://meepo-common/ng-each-of.ts",
    "ng://meepo-common/ng-true.ts",
    "ng://meepo-common/services/class.ts",
    "ng://meepo-common/services/component.outlet.ts",
    "ng://meepo-common/services/template.outlet.ts",
    "ng://meepo-common/services/helper.ts",
    "ng://meepo-common/services/helpers.ts",
    "ng://meepo-common/services/style.ts",
    "ng://meepo-common/common.module.ts",
    "ng://meepo-common/global.ts",
    "ng://meepo-common/functions.ts",
    "ng://meepo-common/classes/scroller.ts",
    "ng://meepo-common/guid.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "import { Directive, Input, Output, EventEmitter, OnInit, AfterViewInit } from '@angular/core';\n\n@Directive({\n    selector: '[ngStart]'\n})\nexport class NgStartDirective implements OnInit {\n    @Input() ngStart: boolean;\n    @Output() ngStartChange: EventEmitter<any> = new EventEmitter();\n    ngOnInit() {\n        if (this.ngStart) {\n            this.ngStartChange.emit(this.ngStart);\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[ngEnd]'\n})\nexport class NgEndDirective implements AfterViewInit {\n    @Input() ngEnd: boolean;\n    @Output() ngEndChange: EventEmitter<any> = new EventEmitter();\n    ngAfterViewInit() {\n        if (this.ngEnd) {\n            this.ngEndChange.emit(this.ngEnd);\n        }\n    }\n}\n\n@Directive({\n    selector: '[ngTrue]'\n})\nexport class NgTrueDirective {\n    @Input() ngTrue: boolean;\n    @Output() ngTrueChange: EventEmitter<any> = new EventEmitter();\n\n    ngOnInit() {\n        if (this.ngTrue) {\n            this.ngTrueChange.emit(true);\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.ngTrue) {\n            this.ngTrueChange.emit(true);\n        }\n    }\n}\n",
    "import {\n    Renderer2, ElementRef, Input,\n    HostBinding, Injectable, IterableDiffer,\n    KeyValueDiffer, IterableDiffers, KeyValueDiffers,\n    ÉµisListLikeIterable as isListLikeIterable, KeyValueChanges,\n    IterableChanges\n} from '@angular/core';\n\n@Injectable()\nexport class ClassService {\n    private _iterableDiffer: IterableDiffer<string> | null;\n    private _keyValueDiffer: KeyValueDiffer<string, any> | null;\n    private _initialClasses: string[] = [];\n    private _rawClass: string[] | Set<string> | { [klass: string]: any };\n    constructor(\n        private _iterableDiffers: IterableDiffers,\n        private _keyValueDiffers: KeyValueDiffers,\n        private _ngEl: ElementRef,\n        private _renderer: Renderer2\n    ) { }\n    // string\n    set klass(v: string) {\n        this._applyInitialClasses(true);\n        this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n        this._applyInitialClasses(false);\n        this._applyClasses(this._rawClass, false);\n    }\n    // obj\n    set ngClass(v: string | string[] | Set<string> | { [klass: string]: any }) {\n        this._cleanupClasses(this._rawClass);\n        this._iterableDiffer = null;\n        this._keyValueDiffer = null;\n        this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n        if (this._rawClass) {\n            if (isListLikeIterable(this._rawClass)) {\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n                this.ngDoCheck();\n            } else {\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n                this.ngDoCheck();\n            }\n        }\n    }\n\n    private ngDoCheck(): void {\n        if (this._iterableDiffer) {\n            const iterableChanges = this._iterableDiffer.diff(this._rawClass as string[]);\n            if (iterableChanges) {\n                this._applyIterableChanges(iterableChanges);\n            }\n        } else if (this._keyValueDiffer) {\n            const keyValueChanges = this._keyValueDiffer.diff(this._rawClass as { [k: string]: any });\n            if (keyValueChanges) {\n                this._applyKeyValueChanges(keyValueChanges);\n            }\n        }\n    }\n\n    private _cleanupClasses(rawClassVal: string[] | { [klass: string]: any }): void {\n        this._applyClasses(rawClassVal, true);\n        this._applyInitialClasses(false);\n    }\n    private _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n        changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n        changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n        changes.forEachRemovedItem((record) => {\n            if (record.previousValue) {\n                this._toggleClass(record.key, false);\n            }\n        });\n    }\n    private _applyIterableChanges(changes: IterableChanges<string>): void {\n        changes.forEachAddedItem((record) => {\n            if (typeof record.item === 'string') {\n                this._toggleClass(record.item, true);\n            } else {\n                throw new Error(`NgClass AntdClassService`);\n            }\n        });\n        changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n    }\n    private _applyInitialClasses(isCleanup: boolean) {\n        this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n    }\n    private _applyClasses(\n        rawClassVal: string[] | Set<string> | { [klass: string]: any },\n        isCleanup: boolean\n    ) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n            } else {\n                Object.keys(rawClassVal).forEach(klass => {\n                    if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n                });\n            }\n        }\n    }\n    private _toggleClass(klass: string, enabled: boolean): void {\n        klass = klass.trim();\n        if (klass) {\n            klass.split(/\\s+/g).forEach(klass => {\n                if (enabled) {\n                    this._renderer.addClass(this._ngEl.nativeElement, klass);\n                } else {\n                    this._renderer.removeClass(this._ngEl.nativeElement, klass);\n                }\n            });\n        }\n    }\n}\n\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive, Injector,\n    Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy,\n    SimpleChanges, StaticProvider, Type, ViewContainerRef, Injectable\n} from '@angular/core';\n\n@Injectable()\nexport class ComponentOutletService {\n    private _componentRef: ComponentRef<any> | null = null;\n    private _moduleRef: NgModuleRef<any> | null = null;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef\n    ) { }\n\n    create(\n        ngComponentOutlet: Type<any>,\n        ngComponentOutletInjector?: Injector,\n        ngComponentOutletContent?: any[][],\n        ngComponentOutletNgModuleFactory?: NgModuleFactory<any>\n    ): ComponentRef<any> | null {\n        this._viewContainerRef.clear();\n        this._componentRef = null;\n        if (ngComponentOutlet) {\n            const elInjector = ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n            if (this._moduleRef) this._moduleRef.destroy();\n            if (ngComponentOutletNgModuleFactory) {\n                const parentModule = elInjector.get(NgModuleRef);\n                this._moduleRef = ngComponentOutletNgModuleFactory.create(parentModule.injector);\n            } else {\n                this._moduleRef = null;\n            }\n            const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(ComponentFactoryResolver);\n            const componentFactory = componentFactoryResolver.resolveComponentFactory(ngComponentOutlet);\n            this._componentRef = this._viewContainerRef.createComponent(\n                componentFactory,\n                this._viewContainerRef.length,\n                elInjector,\n                ngComponentOutletContent\n            );\n            return this._componentRef;\n        }\n        return null;\n    }\n    update(): void { }\n    destroy(): void {\n        if (this._moduleRef) this._moduleRef.destroy();\n    }\n}\n",
    "import {\n  Directive, EmbeddedViewRef, Input, OnChanges,\n  SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef,\n  Injectable\n} from '@angular/core';\n@Injectable()\nexport class TemplateOutletService {\n  private _viewRef: EmbeddedViewRef<any>;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef\n  ) { }\n\n  create(tpl: TemplateRef<any>, context: Object): EmbeddedViewRef<any> | null {\n    if (this._viewRef) {\n      this.destroy();\n    }\n    if (tpl) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(tpl, context);\n      return this._viewRef;\n    }\n    return null;\n  }\n\n  update(ctx: Object): void {\n    for (let propName of Object.keys(ctx)) {\n      (<any>this._viewRef.context)[propName] = (<any>ctx)[propName];\n    }\n  }\n\n  destroy(): void {\n    const index = this._viewContainerRef.indexOf(this._viewRef);\n    if (index >= 0) {\n      this._viewContainerRef.remove(index);\n    }\n  }\n}\n",
    "import { Injectable, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { ComponentOutletService } from './component.outlet';\nimport { TemplateOutletService } from './template.outlet';\nimport { Type, Injector, NgModuleFactory } from '@angular/core';\n@Injectable()\nexport class HelperService {\n    private _templateCreator: TemplateOutletService;\n    private _componentCreator: ComponentOutletService;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef\n    ) {\n        this._templateCreator = new TemplateOutletService(_viewContainerRef);\n        this._componentCreator = new ComponentOutletService(_viewContainerRef);\n    }\n\n    createTemplate(tpl: TemplateRef<any>, context?: Object): void {\n        this._templateCreator.create(tpl, context);\n    }\n\n    createComponent(\n        component: Type<any>,\n        injector?: Injector,\n        content?: any[][],\n        ngModel?: NgModuleFactory<any>\n    ): void {\n        this._componentCreator.create(component, injector, content, ngModel);\n    }\n\n    destory(): void {\n        this._templateCreator.destroy();\n        this._componentCreator.destroy();\n    }\n}",
    "import {\n    Injectable, ViewContainerRef, Type,\n    NgModuleFactory, Injector, TemplateRef,\n    Host\n} from '@angular/core';\nimport { HelperService } from './helper';\n\nexport interface AddComponentProps {\n    component: Type<any>,\n    injector?: Injector,\n    content?: any[][],\n    ngModel?: NgModuleFactory<any>\n}\n\nexport interface AddTemplateProps {\n    tpl: TemplateRef<any>,\n    context?: Object\n}\n\nexport class HelpersService {\n    components: any[] = [];\n    templates: any[] = [];\n    constructor(\n        @Host() private _viewContainerRef: ViewContainerRef\n    ) { }\n\n    addComponent(\n        component: Type<any>,\n        injector?: Injector,\n        content?: any[][],\n        ngModel?: NgModuleFactory<any>\n    ): HelperService {\n        const helper = new HelperService(this._viewContainerRef);\n        helper.createComponent(component, injector, content, ngModel);\n        this.components.push(helper);\n        return helper;\n    }\n\n    addTemplate(\n        tpl: TemplateRef<any>,\n        context?: Object\n    ): HelperService {\n        const helper = new HelperService(this._viewContainerRef);\n        helper.createTemplate(tpl, context);\n        this.templates.push(helper);\n        return helper;\n    }\n\n    addComponents(components: AddComponentProps[] = []) {\n        components.map((res: AddComponentProps) => {\n            this.addComponent(res.component, res.injector, res.content, res.ngModel)\n        });\n    }\n\n    addTemplates(tpls: AddTemplateProps[] = []) {\n        tpls.map((res: AddTemplateProps) => {\n            this.addTemplate(res.tpl, res.context);\n        });\n    }\n}",
    "import {\n    Directive, DoCheck, ElementRef, Input, KeyValueChanges,\n    KeyValueDiffer, KeyValueDiffers, Renderer2, Injectable\n} from '@angular/core';\n\n@Injectable()\nexport class StyleService {\n    private _ngStyle: { [key: string]: string };\n    private _differ: KeyValueDiffer<string, string | number>;\n\n    constructor(\n        private _differs: KeyValueDiffers,\n        private _ngEl: ElementRef,\n        private _renderer: Renderer2\n    ) { }\n\n    set ngStyle(v: { [key: string]: string }) {\n        this._ngStyle = v;\n        if (!this._differ && v) {\n            this._differ = this._differs.find(v).create();\n            this.ngDoCheck();\n        }\n    }\n\n    private ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this._ngStyle);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    }\n    private _applyChanges(changes: KeyValueChanges<string, string | number>): void {\n        changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n        changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n        changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n    }\n    private _setStyle(nameAndUnit: string, value: string | number | null | undefined): void {\n        const [name, unit] = nameAndUnit.split('.');\n        value = value != null && unit ? `${value}${unit}` : value;\n        this._renderer.setStyle(this._ngEl.nativeElement, name, value as string);\n    }\n}\n",
    "import { NgModule, ViewContainerRef } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgEndDirective, NgStartDirective, NgTrueDirective } from './ng-true';\n\nimport { ClassService, StyleService } from './services';\n\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgStartDirective,\n        NgEndDirective,\n        NgTrueDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgStartDirective,\n        NgEndDirective,\n        NgTrueDirective\n    ],\n    providers: [\n        ClassService,\n        StyleService\n    ]\n})\nexport class MeepoCommonModule { }\n",
    "declare var WorkerGlobalScope: any;\ndeclare var global: any;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _global: { [name: string]: any } = __window || __global || __self;\nexport { _global as global };\n",
    "export function isMeepoTrue(val) {\n    return isTrueProperty(val);\n}\n\nexport function isTrueProperty(val: any): boolean {\n    if (typeof val === 'string') {\n        val = val.toLowerCase().trim();\n        return (val === 'true' || val === 'on' || val === '');\n    }\n    return !!val;\n}\n\nexport function isCheckedProperty(a: any, b: any): boolean {\n    if (a === undefined || a === null || a === '') {\n        return (b === undefined || b === null || b === '');\n\n    } else if (a === true || a === 'true') {\n        return (b === true || b === 'true');\n\n    } else if (a === false || a === 'false') {\n        return (b === false || b === 'false');\n\n    } else if (a === 0 || a === '0') {\n        return (b === 0 || b === '0');\n    }\n    // not using strict comparison on purpose\n    return (a == b); // tslint:disable-line\n}\n\n\n/** @hidden */\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n/** @hidden */\nexport function isString(val: any): val is string { return typeof val === 'string'; }\n/** @hidden */\nexport function isNumber(val: any): val is number { return typeof val === 'number'; }\n/** @hidden */\nexport function isFunction(val: any): val is Function { return typeof val === 'function'; }\n/** @hidden */\nexport function isDefined(val: any): boolean { return typeof val !== 'undefined'; }\n/** @hidden */\nexport function isUndefined(val: any): val is undefined { return typeof val === 'undefined'; }\n/** @hidden */\nexport function isPresent(val: any): val is any { return val !== undefined && val !== null; }\n/** @hidden */\nexport function isBlank(val: any): val is null { return val === undefined || val === null; }\n/** @hidden */\nexport function isObject(val: any): val is Object { return typeof val === 'object'; }\n/** @hidden */\nexport const isArray = Array.isArray;\nexport const isFinite = Number.isFinite;\n\nexport function isNaN(value: any): boolean {\n    return isNumber(value) && value !== +value;\n}\n\nexport function isWindow(el) {\n    return el !== null && el === el.window\n}\n\nexport function isDocument(el) {\n    return el.nodeType === 9\n}\n\n\n\nexport { isDevMode } from '@angular/core';\nimport { Type } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nexport function isPromise(obj: any): obj is Promise<any> {\n    return !!obj && typeof obj.then === 'function';\n}\n\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\nexport function isType(v: any): v is Type<any> {\n    return typeof v === 'function';\n}\n\nexport function isComponentView(view: any): boolean {\n    return !!view.parent && !!(view.parentNodeDef!.flags & 1 << 15);\n}\n\nexport function isEmbeddedView(view: any): boolean {\n    return !!view.parent && !(view.parentNodeDef!.flags & 1 << 15);\n}\n\nexport function stringify(token: any): string {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n// ä¸¤ä¸ªæ°å­æ¯å¦ç¸ç­\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\nimport { global } from './global';\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string | symbol {\n    if (!_symbolIterator) {\n        const Symbol = global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        } else {\n            // es6-shim specific logic\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (Map as any).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\n\n\nexport function isListLikeIterable(obj: any): boolean {\n    if (!isJsObject(obj)) return false;\n    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);\n}\n\nexport function areIterablesEqual(\n    a: any,\n    b: any,\n    comparator: (a: any, b: any) => boolean\n): boolean {\n    const iterator1 = a[getSymbolIterator()]();\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        const item1 = iterator1.next();\n        const item2 = iterator2.next();\n        if (item1.done && item2.done) return true;\n        if (item1.done || item2.done) return false;\n        if (!comparator(item1.value, item2.value)) return false;\n    }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    } else {\n        const iterator = obj[getSymbolIterator()]();\n        let item: any;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n\nexport function isJsObject(o: any): boolean {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\ndeclare const require;\nconst classNames = require('classnames');\nexport { classNames }\n\nexport function ansycClassObj(obj: any, srtClassName: string = '') {\n    for (const key in obj) {\n        srtClassName += obj[key] ? ` ${key} ` : ` `;\n    }\n    return srtClassName;\n}\n\nexport function type(ele: any): string {\n    return typeof ele;\n}\n\nexport function setClassObj(arrs: any, to: Object = {}, val: any, pre: string = '') {\n    if (type(arrs) === 'string') {\n        arrs = arrs.split(',');\n    }\n    arrs.map((arr, index) => {\n        to[`${pre}-${arr}`] = val === arr;\n    });\n    return to;\n}\n",
    "import { ElementRef } from '@angular/core';\n\nexport class Scroller {\n    _viewportSize: any;\n    constructor(\n        public ele: ElementRef\n    ) { }\n\n    getViewportScrollPosition() {\n        const ele = this.ele.nativeElement;\n        const documentRect = ele.getBoundingClientRect();\n        const top = -documentRect.top || ele.scrollTop || 0;\n        const left = -documentRect.left || ele.scrollLeft || 0;\n        return { top, left };\n    }\n\n    private _updateViewportSize() {\n        this._viewportSize = {\n            width: this.ele.nativeElement.offsetWidth,\n            height: this.ele.nativeElement.offsetHeight\n        };\n    }\n\n    getViewportSize(): Readonly<{ width: number, height: number }> {\n        if (!this._viewportSize || !this._viewportSize.height || !this._viewportSize.width) {\n            this._updateViewportSize();\n        }\n        return {\n            width: this._viewportSize.width,\n            height: this._viewportSize.height\n        };\n    }\n\n    getViewportRect(): ClientRect {\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n}\n",
    "export function guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}"
  ],
  "names": [
    "this",
    "key",
    "NgEachOf",
    "_viewContainer",
    "_template",
    "_differs",
    "set",
    "value",
    "_differ",
    "find",
    "create",
    "prototype",
    "ngDoCheck",
    "_applyChanges",
    "changes",
    "item",
    "previousValue",
    "view",
    "_this",
    "createEmbeddedView",
    "NgEachOfContext",
    "currentValue",
    "ngEachOf",
    "parseInt",
    "tuple",
    "RecordViewTuple",
    "insertTuples",
    "push",
    "remove",
    "get",
    "move",
    "type",
    "KeyValueDiffers",
    "propDecorators",
    "index",
    "ngStartChange",
    "EventEmitter",
    "emit",
    "ngStart",
    "NgStartDirective",
    "selector",
    "Output",
    "NgEndDirective",
    "ngEnd",
    "ngEndChange",
    "Directive",
    "args",
    "Input",
    "NgTrueDirective",
    "ngTrueChange",
    "ngOnInit",
    "ngTrue",
    "ngAfterViewInit",
    "decorators",
    "ClassService",
    "_iterableDiffers",
    "_keyValueDiffers",
    "_ngEl",
    "_renderer",
    "_initialClasses",
    "v",
    "_applyInitialClasses",
    "split",
    "_applyClasses",
    "_rawClass",
    "Object",
    "defineProperty",
    "_cleanupClasses",
    "_iterableDiffer",
    "_keyValueDiffer",
    "ÉµisListLikeIterable",
    "enumerable",
    "configurable",
    "iterableChanges",
    "diff",
    "_applyIterableChanges",
    "_applyKeyValueChanges",
    "keyValueChanges",
    "rawClassVal",
    "record",
    "_toggleClass",
    "Error",
    "isCleanup",
    "forEach",
    "klass",
    "keys",
    "removeClass",
    "nativeElement",
    "Injectable",
    "IterableDiffers",
    "ElementRef",
    "Renderer2",
    "ComponentOutletService",
    "_viewContainerRef",
    "_componentRef",
    "_moduleRef",
    "ngComponentOutlet",
    "ngComponentOutletInjector",
    "ngComponentOutletContent",
    "ngComponentOutletNgModuleFactory",
    "clear",
    "elInjector",
    "parentInjector",
    "destroy",
    "componentFactory",
    "resolveComponentFactory",
    "createComponent",
    "length",
    "ctorParameters",
    "TemplateOutletService",
    "_viewRef",
    "tpl",
    "context",
    "update",
    "ctx",
    "propName",
    "_b",
    "e_1_1",
    "e_1",
    "error",
    "_c",
    "indexOf",
    "HelperService",
    "_templateCreator",
    "_componentCreator",
    "components",
    "templates",
    "HelpersService",
    "addComponent",
    "component",
    "injector",
    "content",
    "ngModel",
    "helper",
    "addTemplate",
    "addTemplates",
    "tpls",
    "ViewContainerRef",
    "Host",
    "StyleService",
    "_setStyle",
    "nameAndUnit",
    "_a",
    "__read",
    "name",
    "unit",
    "setStyle",
    "MeepoCommonModule",
    "NgModule",
    "exports",
    "providers",
    "self",
    "WorkerGlobalScope",
    "__global",
    "global",
    "_global",
    "__window",
    "__self",
    "val",
    "isNumber",
    "isNaN",
    "_symbolIterator",
    "getOwnPropertyNames",
    "Map",
    "i",
    "isJsObject",
    "o",
    "classNames",
    "require",
    "Scroller",
    "ele",
    "getViewportScrollPosition",
    "documentRect",
    "getBoundingClientRect",
    "top",
    "scrollTop",
    "left",
    "scrollLeft",
    "_updateViewportSize",
    "_viewportSize",
    "height",
    "width",
    "isTrueProperty",
    "undefined",
    "el",
    "obj",
    "subscribe",
    "parent",
    "flags",
    "stringify",
    "token",
    "map",
    "join",
    "overriddenName",
    "res",
    "toString",
    "newLineIndex",
    "substring",
    "a",
    "b",
    "Array",
    "isArray",
    "getSymbolIterator",
    "comparator",
    "iterator1",
    "iterator2",
    "item1",
    "done",
    "item2",
    "fn",
    "iterator",
    "next",
    "arrs",
    "arr",
    "to",
    "pre"
  ],
  "mappings": "ssMAcAA,KAAAC,IAAAA,oBAKA,SAAAC,EAAAC,EAAAC,EAAAC,GACAL,KAAAG,eAAAA,EAGAH,KAAAI,UAAAA,oCAoDA,0DA9CgBE,IAAhB,SAAAC,GAJAA,IAKAP,KAAAI,UAAAG,4IAOgBP,KAAhBQ,QAAAR,KAAAK,SAAAI,KAAAF,GAAAG,YAOAR,EAAAS,UAAAC,UAAA,sEACAZ,KAAAa,cAAAC,qFAOA,GAAA,MAAAC,EAAAC,cAAA,CACA,IAAAC,EAAAC,EAAAf,eAAAgB,mBAAAD,EAAAd,UAAA,IAAAgB,GAAAL,EAAAM,aAAAH,EAAAI,SAAAP,EAAAd,KAAAsB,SAAAR,EAAAd,IAAA,KACAuB,EAAA,IAAAC,GAAAV,EAAAE,EAAAM,SAAAR,EAAAd,IAAA,KAEoByB,EAApBC,KAAsCH,QAMtC,GAAA,MAAAT,EAAAM,aACoBH,EAApBf,eAAAyB,OAAAL,SAAAR,EAAAd,IAAA,SACuB,CACvBgB,EAAAC,EAAwDf,eAAe0B,IAAvEN,SAAAR,EAAAd,IAAA,KACAiB,EAAAf,eAAA2B,KAAAb,EAAAM,SAAAR,EAAAd,IAAA,KAAAuB,EAAA,IAAAC,GAAAV,EAAAM,aAAA,EAAAE,SAAAR,EAAAd,IAAA,KACoByB,EAApBC,KAAAH,OAQAtB,mKAtEA6B,KAAqBC,EAAAA,mBAIrB9B,GAAA+B,0EAsBA,IAAAR,GAAA,WAsDA,qCAHAzB,KAAAiB,KAAAA,EACejB,KAAfkC,MAAAA,GApDA,8BC/BAlC,KAAAmC,cAAA,IAAAC,EAAAA,aAWA,qDAHYpC,KAAZmC,cAAAE,KAAArC,KAAAsC,UAGAC,6CATAC,SAAA,mGAIAL,gBAAKJ,KAALU,EAAAA,4BAaA,SAAAC,wCAOA,8CAJA1C,KAAA2C,OACY3C,KAAK4C,YAAjBP,KAAArC,KAAA2C,QAGAD,qBAVAX,KAACc,EAAAA,UAADC,OACIN,SAAU,wEAGdG,QAAAZ,KAAKgB,EAAAA,QACLH,cAAAb,KAAKU,EAAAA,UAWL,IAAAO,GAAA,wBAEAhD,KAAAiD,aAAgD,IAAIb,EAAAA,oBAEhDY,EAAJrC,UAAAuC,SAAA,WACYlD,KAAKmD,QACLnD,KAAKiD,aAAaZ,MAAK,IAI/BW,EAAJrC,UAAAyC,gBAAA,WACYpD,KAAKmD,QACLnD,KAAKiD,aAAaZ,MAAK,MAZnC,GAHAW,GAAAK,aACAtB,KAAAc,EAAAA,UAAAC,OACAN,SAAA,sDAEAQ,GAAAf,gBACAkB,SAAApB,KAAAgB,EAAAA,wCClCA,IAAAO,GAAA,WAcI,SAAJA,EAAAC,EAAAC,EAAAC,EAAAC,GACgB1D,KAAhBuD,iBAAgBA,EACAvD,KAAhBwD,iBAAgBA,EACAxD,KAAhByD,MAAgBA,EACAzD,KAAhB0D,UAAgBA,EANhB1D,KAAA2D,qEAUQrD,IAAK,SAAbsD,GACY5D,KAAZ6D,sBAAsC,GAC1B7D,KAAZ2D,gBAAA,iBAAAC,EAAAA,EAAAE,MAAA,UACY9D,KAAZ6D,sBAAA,GACA7D,KAAA+D,cAAA/D,KAAAgE,WAAA,oCAEIC,OAAJC,eAAAZ,EAAA3C,UAAA,WAKQL,IAAR,SAAAsD,GACY5D,KAAZmE,gBAAAnE,KAAAgE,WACAhE,KAAAoE,gBAAA,KACApE,KAAAqE,gBAAA,KACArE,KAAAgE,UAAA,iBAAAJ,EAAAA,EAAAE,MAAA,OAAAF,EAAA5D,KAAAgE,YACoBM,EAAAA,oBAApBtE,KAAAgE,YACoBhE,KAApBoE,gBAAApE,KAAAuD,iBAAA9C,KAAAT,KAAAgE,WAAAtD,SACAV,KAAAY,2GAMA2D,YAAA,EACAC,cAAA,IAIAlB,EAAA3C,UAAAC,UAAA,WACA,GAAYZ,KAAZoE,gBAAA,CACA,IAAAK,EAAAzE,KAAAoE,gBAAAM,KAAA1E,KAAA,WACAyE,GACAzE,KAAA2E,sBAAAF,oFAGAzE,KAAA4E,sBAAAC,KAIYvB,EAAZ3C,UAAAwD,gBAAA,SAAAW,GACQ9E,KAAR+D,cAAAe,GAAwC,GAChC9E,KAAR6D,sBAAkC,0PAOlCkB,EAAA/D,eACgBE,EAAhB8D,aAAAD,EAAA9E,KAAA,MAOAqD,EAAA3C,UAAAgE,sBAAmD,SAAnD7D,wEAGA,MAAA,IAAAmE,MAAA,6HAOA3B,EAAA3C,UAAAkD,qBAAA,SAAAqB,GACA,IAAAhE,EAAAlB,KACAA,KAAa2D,gBAAbwB,QAAA,SAAAC,GAAA,OAAAlE,EAAA8D,aAAAI,GAAAF,MAKA5B,EAAA3C,UAAAoD,cAAA,SAAAe,EAAAI,yGAEwBjB,OAAxBoB,KAAAP,GAAAK,QAAA,SAAAC,GACA,MAAAN,EAAAM,IACAlE,EAAA8D,aAAAI,GAAAF,2JAnGAhE,EAAAwC,UAAA4B,YAAApE,EAAAuC,MAAA8B,cAAAH,QADA,mBCQArD,KAPAyD,EAAAA,kDAWAzD,KAAA0D,EAAAA,kBACA1D,KAAAC,EAAAA,kBAJAD,KAAA2D,EAAAA,aACA3D,KAAA4D,EAAAA,+BAYA,SAAaC,EAAuBC,GAC5B7F,KAAK6F,kBAAoBA,EACzB7F,KAAR8F,cAA6B,KAC7B9F,KAAA+F,WAAA,KCzBA,ODgCAH,EAAAjF,UAAAD,OAAA,SAAAsF,EAAAC,EAAAC,EAAAC,GAGA,GAFAnG,KAAA6F,kBAAAO,QACApG,KAAA8F,cAAA,KACYE,EAAZ,CAMY,IAAZK,EAAAJ,GAAAjG,KAAA6F,kBAAAS,eAGA,GAFAtG,KAAA+F,YACA/F,KAAA+F,WAAAQ,UACAJ,EAAA,+FAEAK,+FAAAC,wBAAAT,GAC6B,OAAjBhG,KAAK8F,cAAjB9F,KAAA6F,kBAAAa,gBAAAF,EAAAxG,KAAA6F,kBAAAc,OAAAN,EAAAH,GAAAlG,KAAA8F,sIC/CAF,yCAWAA,GAAAgB,eAAA,WAAA,mCAGA,IAAAC,GAAA,WAIA,SAAAA,EAAAhB,GACA7F,KAAA6F,kBAA2BA,0CAQ3B,OAHA7F,KAAA8G,UACA9G,KAAAuG,UAEAQ,GACA/G,KAAA8G,SAAA9G,KAAA6F,kBAAA1E,mBAAA4F,EAAAC,wBAOAH,EAAAlG,UAAAsG,OAAA,SAAAC,mEA9BA,IAAAC,EAAAC,EAAA7G,qCAHA,MAAA8G,GAAAC,GAAAC,MAAAF,kFCFA,IAAAC,EAAAE,GAUAX,EAAAlG,UAAA4F,QAAA,WAEQ,IAAqBrE,EAA7BlC,KAAA6F,kBAAA4B,QAAAzH,KAAA8G,UACY5E,GAAZ,GACAlC,KAAA6F,kBAAAjE,OAAAM,MDAqB,mBCErBH,KAAAyD,EAAAA,6EAIA,IAAIkC,GAAJ,kDASA1H,KAAA2H,iBAAA,IAAAd,GAAAhB,GACQ7F,KAAK4H,kBAAb,IAAqChC,GAArCC,2MCXA7F,KAAA2H,iBAAApB,8CDCA,GCGAmB,GAAArE,aAHAtB,KAAAyD,EAAAA,6GAkBAxF,KAAA6F,kBAAAA,EAIQ7F,KAAR6H,cACQ7H,KAAR8H,aC1BA,ODgCAC,EAAmBpH,UAAnBqH,aAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAA6BC,EAA7B,IAAAX,GAAA1H,KAAA6F,0BACAwC,EAAA3B,gBAAAuB,EAAAC,EAAAC,EAAAC,GACApI,KAAA6H,WAAAlG,KAAA0G,MAKAN,EAAApH,UAAA2H,YAAA,SAAAvB,EAAAC,GACA,IAAAqB,EAAA,IAAAX,GAAA1H,KAAA6F,gIC1DA,IAAAgC,IAAAA,sFAaAE,EAAApH,UAAA4H,aAAA,SAAAC,GACA,IAAAtH,EAAAlB,4EAGA+H,KAGAA,GAAAnB,eAAA,WAAA,QACA7E,KAAA0G,EAAAA,iBAAApF,aAAAtB,KAAA2G,EAAAA,UAIA,IAAAC,GAAA,2ECXA,ODkBY1E,OAAZC,eAAAyE,EAAAhI,UAAA,6HAOQ4D,YAAR,EACQC,cAAc,6FAtCtB1D,GADAd,KAAAa,cAAAC,+QCQA6H,EAAAhI,UAAAiI,UAAA,SAAAC,EAAAtI,GACA,IAAAuI,EAAAC,GAAAF,EAAA/E,MAAA,KAAA,GAAAkF,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GACAvI,EAAA,MAAAA,GAAA0I,EAAA,GAAA1I,EAAA0I,EAAA1I,EACAP,KAAA0D,UAAAwF,SAAAlJ,KAAAyD,MAAA8B,cAAAyD,EAAA,IAEAL,EDWgB,GCThBA,GAAAtF,aACAtB,KAAAyD,EAAAA,aAGAmD,GAAA/B,eAAA,WAAA,QACA7E,KAAAC,EAAAA,kBACAD,KAAA2D,EAAAA,aACA3D,KAAA4D,EAAAA,sDCpBAwD,GAAA9F,aACAtB,KAAAqH,EAAAA,SAAAtG,OACAuG,SACAnJ,wCCLAoJ,WACAhG,WAGA6F,GAAkBvC,eAAlB,WAAA,wHAOA2C,gBAAAC,mBAAAD,KACIE,GAA6B,oBAAjCC,QAAAA,OACAC,GAAAC,IAAAH,IAAAI,2CAiBA,qCAAA,OAAAC,GAAsF,KAAtFA,MAcA,SAAAC,GAAAD,GAAA,MAAA,iBAAgEA,0CAgChE,SAAAE,GAAAzJ,wBAsEA,IAAA0J,GAAA,+EAYA,IADA,IAAA5E,EAAApB,OAAAiG,oBAAAC,IAAAxJ,WACAyJ,EAAA,EAAAA,EAAgC/E,EAAhCsB,SAAAyD,EAAA,CACA,IAAAnK,EAAAoF,EAA+B+E,GAC/B,YAAAnK,GAAA,SAAAA,GAAA,IAAAU,UAAAV,KAAAkK,IAAAxJ,UAAA,UACAsJ,GAAAhK,IAGA,OAAAgK,GAmCA,SAAAI,GAAAC,GACA,OAAA,OAAAA,IAAA,mBAAAA,GAAA,iBAAAA,GAEA,IAAIC,GAAaC,QAAjB,6CCjLA,IAAAC,GAAA,WAIA,SAAAA,EAAAC,GACA1K,KAAA0K,IAAAA,SAGAD,EAAA9J,UAAAgK,0BAAA,WACQ,IAAqBD,EAA7B1K,KAAA0K,IAAAnF,cACAqF,EAAAF,EAAAG,wBAGA,OAAAC,KAFAF,EAAAE,KAAAJ,EAAAK,WAAA,EAEAC,MADqCJ,EAArCI,MAAAN,EAAAO,YAAA,IAMAR,EAAA9J,UAAAuK,oBAAA,WACAlL,KAAAmL,mJC7CAnL,KAAAmL,eAAAnL,KAAAmL,cAAAC,QAAApL,KAAAmL,cAAAE,mCACAA,MAAArL,KAAAmL,cAAAE,MACAD,OAAApL,KAAAmL,cAAuCC,qNDwBvC,wRDHA,SAAAtB,GACA,OAAAwB,GAAAxB,+PAiBA,SAAAA,GAAA,MAAA,kBAAAA,cAEA,SAAAA,GAAA,MAAA,iBAAAA,8BAIA,SAAAA,GAAA,MAAA,mBAAAA,4DAOA,SAAAA,GAAA,YAAA,IAAAA,eAGA,SAAAA,GAA0B,OAAOA,IAAjCyB,WAAA,OAAAzB,aAGA,SAAAA,GAAA,OAAAA,IAAAyB,WAAA,OAAAzB,qGAqBA,SAAA0B,+CAIA,SAAAA,sCAIA,SAAAC,wDAIA,SAAAA,GACA,QAAAA,GAAA,mBAAAA,EAAAC,oBAMA,SAAA9H,GACI,MAAJ,mBAAAA,qBAMA,SAAA3C,GACI,QAAJA,EAAA0K,WAAA,MAAA1K,EAAA,cAAA2K,kGAUA,SAAAC,GAAAC,GAKI,GAFJ,iBAAAA,iCAGA,MAAA,IAAAA,EAAAC,IAAAF,IAAAG,KAAA,MAAA,IAEA,GAAA,MAAQF,EACA,MAAR,GAAAA,EAEA,GAAAA,EAAAG,eAAA,MAAA,GAAAH,EAAAG,eAEA,GAAAH,EAAA9C,KACA,MAAA,GAAA8C,EAAA9C,KAEA,IAAAkD,EAAAJ,EAAqCK,WACrC,GAAA,MAAAD,EACA,MAAA,GAAoBA,EAEpB,IAAAE,EAAAF,EAAAzE,QAAA,MACA,OAAA,IAAA2E,EAAAF,EAAAA,EAAAG,UAAA,EAAAD,mCAOA,OAAAE,IAAAC,GAAA,iBAAAD,GAAA,iBAAAC,GAAAvC,GAAAsC,IAAAtC,GAAAuC,gDAqBA,SAAwCd,GACpC,QAAJpB,GAAAoB,KAEAe,MAAAC,QAAAhB,MAAAA,aAAAtB,MAAAuC,OAAAjB,wBAOA,SAAAa,EAAAC,EAAAI,OACA,IAAAC,EAAAN,EAAAI,QACAG,EAAAN,EAAAG,uDAEA,OAAA,EACA,GAAYI,EAAZC,MAA0BC,EAA1BD,KACA,OAAA,EAEA,IAAAJ,EAAAG,EAAAvM,MAAAyM,EAAAzM,OACA,OAAA,sBAKA,SAAAkL,EAAAwB,GACI,GAAJT,MAAAC,QAAAhB,GACA,IAAA,IAAArB,EAAA,EAAAA,EAAAqB,EAAA9E,OAAAyD,iBAIA,IAFA,IAAA8C,EAAAzB,EAAAiB,QACA3L,OAAA,IACAA,EAAAmM,EAAAC,QAAA,yOCrL+B,WAA/BpL,GAAAqL,KACQA,EAARA,EAAAtJ,MAA0B,MAE1BsJ,EAAArB,IAAA,SAAAsB,EAA4BnL,GAC5BoL,EAAAC,EAAA,IAAAF,GAAAvD,IAAAuD"
}
