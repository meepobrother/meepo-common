{
  "version": 3,
  "file": "meepo-common.umd.min.js",
  "sources": [
    "ng://meepo-common/ng-each-of.ts",
    "ng://meepo-common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\n\n@NgModule({\n    exports: [\n        NgEachOf\n    ],\n    declarations: [\n        NgEachOf\n    ]\n})\nexport class MeepoCommonModule { }\n"
  ],
  "names": [
    "this",
    "ngForOf",
    "key",
    "NgEachOf",
    "_viewContainer",
    "_template",
    "_differs",
    "_differ",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "value",
    "ngOnChanges",
    "changes",
    "currentValue",
    "find",
    "create",
    "ngDoCheck",
    "diff",
    "ngEachOf",
    "_applyChanges",
    "_this",
    "insertTuples",
    "forEachItem",
    "item",
    "previousValue",
    "view",
    "createEmbeddedView",
    "NgEachOfContext",
    "parseInt",
    "tuple",
    "RecordViewTuple",
    "push",
    "remove",
    "get",
    "move",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ViewContainerRef",
    "TemplateRef",
    "record",
    "index",
    "MeepoCommonModule"
  ],
  "mappings": "wQAkBA,wCAHAA,KAAAC,QAAAA,EACeD,KAAfE,IAAAA,MAIAC,EAAA,6BAMAH,KAAAI,eAAAA,EACgBJ,KAAhBK,UAAAA,EACgBL,KAAhBM,SAAAA,EACgBN,KAAhBO,QAAA,YACAC,OAAAC,eAAAN,EAAAO,UAAA,iBAEQC,IAAR,SAAAC,GACAA,IACgBZ,KAAhBK,UAAAO,oCAMAT,EAAAO,UAAAG,YAAA,SAAAC,GACA,GAAA,aAAAA,EAAmC,CACnC,IAAAF,EAAAE,EAAA,SAAAC,cACAf,KAAAO,SAAAK,IACAZ,KAAAO,QAAAP,KAAAM,SAAAU,KAAAJ,GAAAK,YAIAd,EAAAO,UAAuBQ,UAAvB,WAAA,GAAAlB,KAAAO,QAAA,CACA,IAAAO,EAAAd,KAAAO,QAAAY,KAAAnB,KAAAoB,UACAN,2BAMAX,EAAAO,UAAAW,cAAA,SAAAP,GACA,IAAAQ,EAAAtB,KAKAuB,KACAT,EAAoBU,YAAY,SAAhCC,GACA,GAAA,MAAAA,EAAAC,cAAA,CAAA,IAAAC,EAAAL,EAAAlB,eAAAwB,mBAAAN,EAAAjB,UAAA,IAAAwB,EAAAJ,EAAAV,aAAAO,EAAAF,SAAAK,EAAAvB,KAAA4B,SAAAL,EAAAvB,IAAA,KACA6B,EAAA,IAAAC,EAAqEP,EAArEE,EAAAG,SAAAL,EAAAvB,IAAA,KACAqB,EAAAU,KAAAF,QACA,GAAA,MAAAN,EAAAV,aACoBO,EAApBlB,eAAA8B,OAAAJ,SAAAL,EAAAvB,IAAA,SAMA,CACAyB,EAAAL,EAAAlB,eAAA+B,IAAAL,SAAAL,EAAAvB,IAAA,KACAoB,EAAAlB,eAAAgC,KAAAT,EAAAG,SAAAL,EAAAvB,IAAA,kEAxDA,GAfAC,EAAAkC,aADAC,KAA2DC,EAAAA,UAAWC,OAAtEC,SAAA,6DAoBAH,KAAAI,EAAAA,mBAOAJ,KAAAK,EAAAA,4IAwDA,SAAAC,EAAAjB,EAAAkB,8CClFAC,EAAA,WAGA,OAFA,aADA,GAKAA,EAAAT"
}
