{
  "version": 3,
  "file": "meepo-common.umd.min.js",
  "sources": [
    "ng://meepo-common/ng-each-of.ts",
    "ng://meepo-common/functions.ts",
    "ng://meepo-common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "export function isMeepoTrue(val) {\n    return isTrueProperty(val);\n}\n\nexport function isTrueProperty(val: any): boolean {\n    if (typeof val === 'string') {\n        val = val.toLowerCase().trim();\n        return (val === 'true' || val === 'on' || val === '');\n    }\n    return !!val;\n}\n\nexport function isCheckedProperty(a: any, b: any): boolean {\n    if (a === undefined || a === null || a === '') {\n        return (b === undefined || b === null || b === '');\n\n    } else if (a === true || a === 'true') {\n        return (b === true || b === 'true');\n\n    } else if (a === false || a === 'false') {\n        return (b === false || b === 'false');\n\n    } else if (a === 0 || a === '0') {\n        return (b === 0 || b === '0');\n    }\n    // not using strict comparison on purpose\n    return (a == b); // tslint:disable-line\n}\n\n\n/** @hidden */\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n/** @hidden */\nexport function isString(val: any): val is string { return typeof val === 'string'; }\n/** @hidden */\nexport function isNumber(val: any): val is number { return typeof val === 'number'; }\n/** @hidden */\nexport function isFunction(val: any): val is Function { return typeof val === 'function'; }\n/** @hidden */\nexport function isDefined(val: any): boolean { return typeof val !== 'undefined'; }\n/** @hidden */\nexport function isUndefined(val: any): val is undefined { return typeof val === 'undefined'; }\n/** @hidden */\nexport function isPresent(val: any): val is any { return val !== undefined && val !== null; }\n/** @hidden */\nexport function isBlank(val: any): val is null { return val === undefined || val === null; }\n/** @hidden */\nexport function isObject(val: any): val is Object { return typeof val === 'object'; }\n/** @hidden */\nexport const isArray = Array.isArray;\nexport const isFinite = Number.isFinite;\n\nexport function isNaN(value: any): boolean {\n    return isNumber(value) && value !== +value;\n}\n\nexport function isWindow(el) {\n    return el !== null && el === el.window\n}\n\nexport function isDocument(el) {\n    return el.nodeType === 9\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\n\n@NgModule({\n    exports: [\n        NgEachOf\n    ],\n    declarations: [\n        NgEachOf\n    ]\n})\nexport class MeepoCommonModule { }\n"
  ],
  "names": [
    "this",
    "_viewContainer",
    "set",
    "value",
    "_template",
    "NgEachOf",
    "prototype",
    "ngOnChanges",
    "changes",
    "_applyChanges",
    "item",
    "previousValue",
    "view",
    "_this",
    "createEmbeddedView",
    "NgEachOfContext",
    "currentValue",
    "ngEachOf",
    "key",
    "parseInt",
    "tuple",
    "RecordViewTuple",
    "insertTuples",
    "push",
    "remove",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ctorParameters",
    "ViewContainerRef",
    "TemplateRef",
    "KeyValueDiffers",
    "propDecorators",
    "Input",
    "record",
    "index",
    "val",
    "isNumber",
    "MeepoCommonModule",
    "NgModule",
    "exports",
    "a",
    "b",
    "undefined",
    "el"
  ],
  "mappings": "yjJAcAA,KAAAC,eAAAA,qDAgDA,0DA3CAC,IAAA,SAAAC,GACAA,IAGAH,KAAAI,UAAAD,oCAEAE,EAAAC,UAAwDC,YAAxD,SAAAC,GAKA,GAAA,aAAAA,EAAA,6LAOgBR,KAAhBS,cAAAD,KAOAH,EAAAC,UAAAG,cAAA,SAAAD,6CACA,GAAA,MAAAE,EAAAC,cAAA,CACgB,IAAhBC,EAAAC,EAAAZ,eAAAa,mBAAAD,EAAAT,UAAA,IAAAW,EAAAL,EAAAM,aAAAH,EAAAI,SAAAP,EAAAQ,KAAAC,SAAAT,EAAAQ,IAAA,KACAE,EAA4B,IAAIC,EAAhCX,EAAAE,EAA4DO,SAA5DT,EAAAQ,IAAA,KACgBI,EAAhBC,KAAAH,QACA,GAAA,MAAAV,EAAAM,aACAH,EAAAZ,eAAAuB,OAAAL,SAAAT,EAAAQ,IAAA,iGAEAE,EAAA,IAAAC,EAAAX,EAAAM,aAAA,EAAAG,SAAAT,EAAAQ,IAAA,KACAI,EAAAC,KAAAH,OASAf,KAEAA,EAAAoB,aAAAC,KAAAC,EAAAA,UAAAC,OAAAC,SAAgD,yBAEhDxB,EAAAyB,eAAA,WAAA,QACAJ,KAAAK,EAAAA,mBACAL,KAAAM,EAAAA,cACAN,KAAAO,EAAAA,mBAMA5B,EAAA6B,gBACAjB,WAAAS,KAAAS,EAAAA,yDA7CA,OA3BA,SAAAC,EAAAxB,EAAAyB,GAKArC,KAAAoC,OAAAA,6CA0EA,uHCnFAE,EA+BA,SAAAC,GAAAD,GAAA,MAAA,iBAAAA,EDsDAE,GAAoBf,aACpBC,KAAAe,EAAAA,SAAAb,OACAc,iCEpFAF,GAAAV,eAAA,WAAA,yJDCA,SAAuCa,EAAvCC,GACI,OAAID,IAARE,WAAiC,OAAjCF,GAAA,KAAAA,EACAC,IAAAC,WAAA,OAAAD,GAAA,KAAAA,GAEA,IAAAD,GAAA,SAAAA,GACA,IAAgBC,GAAhB,SAAAA,wEAKAD,GAAiBC,eAQjB,SAAAN,GAAA,MAAA,kBAAAA,cAKA,SAAAA,GAAA,MAAA,iBAAAA,8BAMA,SAAAA,GAAA,MAAA,mBAAAA,eAEA,SAAAA,GAAA,YAAA,IAAAA,iBAEA,SAAAA,GAAA,YAAA,IAAAA,eAEA,SAA0BA,GAAqB,OAAOA,IAAtDO,WAAmF,OAAnFP,aAEA,SAAAA,GAAoC,OAApCA,IAAAO,WAAA,OAAAP,cAEA,SAAAA,GAAA,MAAA,iBAAAA,mFAOA,SAAAQ,+CAIA,SAAAA"
}
