{
  "version": 3,
  "file": "meepo-common.umd.js",
  "sources": [
    "ng://meepo-common/common.module.ts",
    "ng://meepo-common/ng-each-of.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\n\n@NgModule({\n    exports: [\n        NgEachOf\n    ],\n    declarations: [\n        NgEachOf\n    ]\n})\nexport class MeepoCommonModule { }\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n"
  ],
  "names": [
    "TemplateRef",
    "ViewContainerRef",
    "Directive"
  ],
  "mappings": "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"
}
