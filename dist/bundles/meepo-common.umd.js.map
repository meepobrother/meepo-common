{
  "version": 3,
  "file": "meepo-common.umd.js",
  "sources": [
    "ng://meepo-common/common.module.ts",
    "ng://meepo-common/ng-each-of.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\n\n@NgModule({\n    exports: [\n        NgEachOf\n    ],\n    declarations: [\n        NgEachOf\n    ]\n})\nexport class MeepoCommonModule { }\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n"
  ],
  "names": [
    "NgModule",
    "Input",
    "KeyValueDiffers",
    "TemplateRef",
    "ViewContainerRef",
    "Directive"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCcA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA;;;;;;;;;;QAKA,GAAA,EAAA,UAAA,KAAA,EAAA;YACA,IAAA,KAAA,EAAA;gBAGA,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA;;;;;;;;;;IAEA,QAAA,CAAA,SAAA,CAAwD,WAAxD,GAAA,UAAA,OAAA,EAAA;QAKA,IAAA,UAAA,IAAA,OAAA,EAAA;;;;;SAEA;KACA,CAAA;;;;;;;;gBAIgB,IAAhB,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;SACA;KACA,CAAA;;;;;IAKA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,OAAA,EAAA;;;;YACA,IAAA,IAAA,CAAA,aAAA,IAAA,IAAA,EAAA;gBACgB,qBAAhB,IAAA,GAAA,KAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,SAAA,EAAA,IAAA,eAAA,CAAA,IAAA,CAAA,YAAA,EAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAA,GAAA,CAAA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBACA,qBAAA,KAAyB,GAAG,IAAI,eAAhC,CAAA,IAAA,EAAA,IAAA,EAA4D,QAA5D,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBACgB,YAAhB,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;aAAA;iBACA,IAAA,IAAA,CAAA,YAAA,IAAA,IAAA,EAAA;gBACA,KAAA,CAAA,cAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;;;;gBAEA,qBAAA,KAAA,GAAA,IAAA,eAAA,CAAA,IAAA,CAAA,YAAA,oBAAA,IAAA,GAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBACA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;aACA;SAEA,CAAA,CAAA;KACA,CAAA;IAKA,OAAA,QAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,QAAA,CAAA,UAAA,GAAA;IAAA,EAAA,IAAA,EAAAK,cAA2B,EAA3B,IAAA,EAAA,CAAA,EAAA,QAAA,EAAgD,oBAAhD,EAAA,EAAA,EAAA;CACA,CAAA;;AACA,QAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAAD,qBAAA,GAAA;IACA,EAAA,IAAA,EAAAD,gBAAA,GAAA;IACA,EAAA,IAAA,EAAAD,oBAAA,GAAA;CAKA,CAAA,EAAA,CAAA;AACA,QAAA,CAAA,cAAA,GAAA;IACA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,UAAA,EAAA,EAAA;;;;;;;;;IAxEA,SAAA,eAAA,CAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA;QAKA,IAA2B,CAA3B,MAAA,GAAA,MAAA,CAAA;;;KAeA;IAOA,OAAA,eAAA,CAAA;;;;;;;;KAmDA;IACA,OAAA,iBAAqB,CAArB;CACA,EAAA,CAAA,CAAA;AACA,iBAAA,CAAoB,UAApB,GAAA;IACA,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;gBACA,OAAA,EAAA;;;;;;aDvFA,EAAA,EAAA;;;AAGA,iBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
